/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.21.0'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    api 'org.springframework.boot:spring-boot-starter-web:3.2.2'
    api 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.1.0'
    api 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.2'

    implementation 'mysql:mysql-connector-java:8.0.28'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'com.google.code.gson:gson:2.10.1'

    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.2'
    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation "org.testcontainers:testcontainers:1.19.0"

    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.2'
    implementation 'com.redis.testcontainers:testcontainers-redis-junit:1.6.4'

    implementation(platform("software.amazon.awssdk:bom:2.20.136"))
    implementation("commons-io:commons-io:2.13.0")
    implementation("software.amazon.awssdk:aws-core")
    implementation("software.amazon.awssdk:sdk-core")
    implementation("software.amazon.awssdk:sts")
    implementation("software.amazon.awssdk:s3")
    testImplementation("org.testcontainers:localstack:1.19.0")

    implementation 'org.springframework.kafka:spring-kafka:3.1.1'
    testImplementation 'org.testcontainers:kafka:1.18.3'
    testImplementation 'com.tngtech.archunit:archunit:1.3.0'
}

group = 'com.example'
version = '1.0'
description = 'first-service'
java.sourceCompatibility = JavaVersion.VERSION_17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

task integrationTest(type: Test) {
    useJUnitPlatform{
        includeTags 'IntegrationTest'
    }
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jacocoTestReport {
    reports{
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    //jacoco 테스트 후 실행
    finalizedBy(tasks.jacocoTestCoverageVerification)
}

// 테스트 커버리지 검증에 따른 jacoco 테스트 성공/실패 여부
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"   //class 별로 검사

            // 테스트 코드 커버 비율 설정 (50% 이상일 경우에만 jacoco의 테스트 성공)
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.5)
            }

            //class 당 코드 전체 라인이 최대 100 줄까지 가능
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.controller.*",
                    "*.vo.*",
                    "*.exception.*",
                    "com.example.firstservice.messagequeue.KafkaConsumerService",
                    "com.example.firstservice.FirstServiceApplication"
            )
        }
    }
}

spotless {
    java {
        googleJavaFormat()

        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.register('addGitPrecommitHook', Copy) {
    from 'script/pre-commit'
    into '../.git/hooks'
}
