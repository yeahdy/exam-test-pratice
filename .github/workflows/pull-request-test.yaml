#discovery
name: Pull Request Test

#pull request 생성/동기화/재생성 될 때 스크립트 실행
on:
  pull_request:
    types: [opened, synchronize, reopened]

# 모든 조회 권한 허용
permissions: read-all

jobs:
  build-test:
    runs-on: ubuntu-latest  #우분투 최신버전으로 실행
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v3.0.2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            application:
              - '**/build.gradle'
              - '**/src/**'
      
      - name: JDK 설치
        if: steps.changes.outputs.application == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu  #zule에서 java17 버전 사용
          cache: 'gradle'

      - name: Gradle Build
        if: steps.changes.outputs.application == 'true'
        run: |  #병렬로 동작
          chmod +x first-service/gradlew
          cd first-service
          ./gradlew :spotlessApply
          ./gradlew build --parallel

      - name: Coverage Report
        if: steps.changes.outputs.application == 'true'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Code Coverage
          update-comment: true
          min-coverage-overall: 10
          min-coverage-changed-files: 10
          # github pr에 jacoco 리포트를 코멘트로 남겨줌(** 모든 하위디렉토리 조회)
          paths: |
            ${{ github.workspace }}/**/build/jacoco/jacoco.xml
    
  style-test:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v3.0.2

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            application:
              - '**/build.gradle'
              - '**/src/**'

      - name: JDK 설치
        if: steps.changes.outputs.application == 'true'
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
          cache: 'gradle'

      - name: Style Check
        if: steps.changes.outputs.application == 'true'
        run: |
          chmod +x first-service/gradlew
          cd first-service
          ./gradlew spotlessCheck